import { configureStore } from '@reduxjs/toolkit'
import { activeBoardReducer } from './activeBoard/activeBoardSlice'
import { userReducer } from '~/redux/User/userSlice'
import { activeCardReducer } from './activeCard/activeCardSlice'
import { notificationsReducer } from './notifications/notificationsSlice'
import chatBotReducer from '~/redux/chatBot/ChatBotSlice'
import { evaluationReducer } from '~/redux/activeEvaluation/activeEvaluationSlice' // hoáº·c Ä‘Ãºng path cá»§a file báº¡n lÆ°u slice

import { combineReducers } from 'redux'
import { persistReducer } from 'redux-persist'
import storage from 'redux-persist/lib/storage'
import explainAIReducer from '~/redux/ExplainAI/explainAISlice'
import spellCheckReducer from '~/redux/spellCheck/spellCheckSlice' // ðŸ‘ˆ Import spellCheck reducer
import evaluationSubmissionReducer from '~/redux/activeEvaluationSubmission/evaluationSubmissionSlice'
import myEvaluationResultsSlice from '~/redux/activeEvaluationSubmission/myEvaluationResultsSlice' // ðŸ‘ˆ ThÃªm import má»›i
import detailedEvaluationResultsReducer from '~/redux/activeEvaluationSubmission/detailedEvaluationResultsSlice'
const rootPersistConfig = {
  key: 'root',
  storage,
  whitelist: ['user']
}

const reducers = combineReducers({
  activeBoard: activeBoardReducer,
  user: userReducer,
  activeCard: activeCardReducer,
  notifications: notificationsReducer,
  evaluation: evaluationReducer, // ðŸ‘ˆ dÃ¹ng Ä‘Ãºng key tÃªn slice lÃ  "evaluation"
  chatbot: chatBotReducer,
  explainAI: explainAIReducer,
  evaluationSubmission: evaluationSubmissionReducer,
  spellCheck: spellCheckReducer,// ðŸ‘ˆ ThÃªm spellCheck reducer
  myEvaluationResults: myEvaluationResultsSlice, // ðŸ‘ˆ ThÃªm reducer má»›i
  detailedEvaluationResults: detailedEvaluationResultsReducer
})

const persistedReducers = persistReducer(rootPersistConfig, reducers)

export const store = configureStore({
  reducer: persistedReducers,
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware({ serializableCheck: false }),
})
