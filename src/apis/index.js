import authorizedAxiosInstance from '~/utils/authorizeAxios'
import { API_ROOT } from '~/utils/constants'
import { toast } from 'react-toastify'
import { DEFAULT_ITEMS_PER_PAGE } from '~/utils/constants'
// Board
// ƒê√£ move v√†o redux
// export const fetchBoardDetailsAPI = async (boardId) => {
//   const response = await axios.get(`${API_ROOT}/v1/boards/${boardId}`)
//   // L∆∞u √Ω: Axios s·∫Ω tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªÅ qua property c·ªßa n√≥ l√† data
//   return response.data
// }
// Board,
// put l√† c·∫≠p nh·∫≠t d·ªØ li·ªáu
export const updateBoardDetailsAPI = async (boardId, updateData) => {
  const response = await authorizedAxiosInstance.put(`${API_ROOT}/v1/boards/${boardId}`, updateData)
  // put l√† c·∫≠p nh·∫≠t d·ªØ li·ªáu)
  return response.data
}

export const moveCardToDifferentColumnAPI = async (updateData) => {
  const response = await authorizedAxiosInstance.put(`${API_ROOT}/v1/boards/supports/moving_card`, updateData)
  return response.data
}

// Column
export const createNewColumnAPI = async (newColumnData) => {
  const response = await authorizedAxiosInstance.post(`${API_ROOT}/v1/columns`, newColumnData)
  // L∆∞u √Ω: Axios s·∫Ω tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªÅ qua property c·ªßa n√≥ l√† data
  return response.data
}
// Update Column
// put l√† c·∫≠p nh·∫≠t d·ªØ li·ªáu
export const updateColumnDetailsAPI = async (columnId, updateData) => {
  const response = await authorizedAxiosInstance.put(`${API_ROOT}/v1/columns/${columnId}`, updateData)
  // put l√† c·∫≠p nh·∫≠t d·ªØ li·ªáu)
  return response.data
}
// Delete Column
export const deleteColumnDetailsAPI = async (columnId) => {
  const response = await authorizedAxiosInstance.delete(`${API_ROOT}/v1/columns/${columnId}`)
  // put l√† c·∫≠p nh·∫≠t d·ªØ li·ªáu)
  return response.data
}


// Card
export const createNewCardAPI = async (newCardData) => {
  const response = await authorizedAxiosInstance.post(`${API_ROOT}/v1/cards`, newCardData)
  // L∆∞u √Ω: Axios s·∫Ω tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªÅ qua property c·ªßa n√≥ l√† data
  return response.data
}
// 5. Th√™m API function v√†o apis/index.js
export const deleteCardAPI = async (cardId) => {
  const response = await authorizedAxiosInstance.delete(`${API_ROOT}/v1/cards/${cardId}`)
  return response.data
}

/** Users */
export const registerUserAPI = async (data) => {
  const response = await authorizedAxiosInstance.post(`${API_ROOT}/v1/users/register`, data)
  toast.success('T√†i kho·∫£n ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra v√† x√°c minh t√†i kho·∫£n c·ªßa b·∫°n tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p!', { theme: 'colored' })
  return response.data
}

export const verifyUserAPI = async (data) => {
  const response = await authorizedAxiosInstance.put(`${API_ROOT}/v1/users/verify`, data)
  // Debug: Ki·ªÉm tra cookie ƒë∆∞·ª£c set ch∆∞a
  console.log('üç™ Cookies after verify:', document.cookie)
  console.log('üîç Response headers:', response.headers)
  toast.success('T√†i kho·∫£n ƒë√£ x√°c minh th√†nh c√¥ng! B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫≠n h∆∞·ªüng c√°c d·ªãch v·ª• c·ªßa ch√∫ng t√¥i! Ch√∫c m·ªôt ng√†y t·ªët l√†nh!', { theme: 'colored' })
  return response.data
}
export const refreshTokenAPI = async () => {
  const response = await authorizedAxiosInstance.get(`${API_ROOT}/v1/users/refresh_token`)
  return response.data
}
export const fetchBoardsAPI = async (searchPath) => {
  const response = await authorizedAxiosInstance.get(`${API_ROOT}/v1/boards${searchPath}`)
  return response.data
}
export const createNewBoardAPI = async (data) => {
  const response = await authorizedAxiosInstance.post(`${API_ROOT}/v1/boards`, data)
  toast.success('T·∫°o b·∫£ng th√†nh c√¥ng')
  return response.data
}
export const updateCardDetailsAPI = async (cardId, updateData) => {
  const response = await authorizedAxiosInstance.put(`${API_ROOT}/v1/cards/${cardId}`, updateData)
  return response.data
}
export const inviteUserToBoardAPI = async (data) => {
  const response = await authorizedAxiosInstance.post(`${API_ROOT}/v1/invitations/board`, data)
  toast.success('ƒê√£ m·ªùi th√†nh c√¥ng v√†o b·∫£ng th√†nh c√¥ng!')
  return response.data
}
// Chatbot API
export const sendChatbotMessageAPI = async ({ message, conversationHistory }) => {
  try {
    const response = await authorizedAxiosInstance.post(`${API_ROOT}/v1/ai/chatbot`, {
      message,
      conversationHistory
    })
    return response.data
  } catch (error) {
    // C√≥ th·ªÉ th√™m toast th√¥ng b√°o l·ªói n·∫øu c·∫ßn
    toast.error('G·ª≠i tin nh·∫Øn th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau!', { theme: 'colored' })
    throw error // Re-throw ƒë·ªÉ x·ª≠ l√Ω ti·∫øp trong Redux
  }
}

export const getChatbotHistoryAPI = async () => {
  try {
    const response = await authorizedAxiosInstance.get(`${API_ROOT}/v1/chatbot/history`)
    return response.data
  } catch (error) {
    console.error('L·ªói khi l·∫•y l·ªãch s·ª≠ chat:', error)
    throw error
  }
}

export const clearChatbotHistoryAPI = async () => {
  try {
    const response = await authorizedAxiosInstance.delete(`${API_ROOT}/v1/chatbot/history`)
    return response.data
  } catch (error) {
    toast.error('X√≥a l·ªãch s·ª≠ chat th·∫•t b·∫°i', { theme: 'colored' })
    throw error
  }
}
// Evaluation Criteria
export const createEvaluationCriteriaAPI = async ({ boardId, criteriaList }) => {
  try {
    const response = await authorizedAxiosInstance.post(
      `${API_ROOT}/v1/evaluation`,
      { boardId, criteriaList }
    )
    toast.success('T·∫°o ti√™u ch√≠ ƒë√°nh gi√° th√†nh c√¥ng!', { theme: 'colored' })
    return response.data
  } catch (error) {
    toast.error('T·∫°o ti√™u ch√≠ ƒë√°nh gi√° th·∫•t b·∫°i!', { theme: 'colored' })
    throw error
  }
}

// L·∫•y danh s√°ch ti√™u ch√≠ ƒë√°nh gi√° theo boardId
export const getEvaluationCriteriaAPI = async (boardId) => {
  const response = await authorizedAxiosInstance.get(`${API_ROOT}/v1/single/criteria?boardId=${boardId}`)
  return response.data
}

// ==================== EVALUATION SUBMISSION APIs ====================

// L·∫•y danh s√°ch t·∫•t c·∫£ ƒë√°nh gi√° c·ªßa m·ªôt board
export const getEvaluationsAPI = async (boardId) => {
  try {
    const response = await authorizedAxiosInstance.get(`${API_ROOT}/v1/evaluation/evaluations?boardId=${boardId}`)
    return response.data
  } catch (error) {
    console.error('L·ªói khi l·∫•y danh s√°ch ƒë√°nh gi√°:', error)
    throw error
  }
}

// L·∫•y danh s√°ch ƒë√°nh gi√° c·ªßa m·ªôt user c·ª• th·ªÉ trong board
export const getUserEvaluationsAPI = async (boardId, userId) => {
  try {
    const response = await authorizedAxiosInstance.get(
      `${API_ROOT}/v1/evaluation/user-evaluations?boardId=${boardId}&userId=${userId}`
    )
    return response.data
  } catch (error) {
    console.error('L·ªói khi l·∫•y ƒë√°nh gi√° c·ªßa user:', error)
    throw error
  }
}

// L·∫•y c√°c ƒë√°nh gi√° m√† user hi·ªán t·∫°i ƒë√£ th·ª±c hi·ªán
export const getMyEvaluationsAPI = async (boardId) => {
  try {
    const response = await authorizedAxiosInstance.get(`${API_ROOT}/v1/evaluation/my-evaluations?boardId=${boardId}`)
    return response.data
  } catch (error) {
    console.error('L·ªói khi l·∫•y ƒë√°nh gi√° c·ªßa t√¥i:', error)
    throw error
  }
}

// C·∫≠p nh·∫≠t ƒë√°nh gi√° (n·∫øu cho ph√©p ch·ªânh s·ª≠a)
export const updateEvaluationAPI = async (evaluationId, updateData) => {
  try {
    const response = await authorizedAxiosInstance.put(
      `${API_ROOT}/v1/evaluation/evaluations/${evaluationId}`,
      updateData
    )
    toast.success('C·∫≠p nh·∫≠t ƒë√°nh gi√° th√†nh c√¥ng!', { theme: 'colored' })
    return response.data
  } catch (error) {
    toast.error('C·∫≠p nh·∫≠t ƒë√°nh gi√° th·∫•t b·∫°i!', { theme: 'colored' })
    throw error
  }
}

// X√≥a ƒë√°nh gi√° (n·∫øu c√≥ quy·ªÅn)
export const deleteEvaluationAPI = async (evaluationId) => {
  try {
    const response = await authorizedAxiosInstance.delete(`${API_ROOT}/v1/evaluation/evaluations/${evaluationId}`)
    toast.success('X√≥a ƒë√°nh gi√° th√†nh c√¥ng!', { theme: 'colored' })
    return response.data
  } catch (error) {
    toast.error('X√≥a ƒë√°nh gi√° th·∫•t b·∫°i!', { theme: 'colored' })
    throw error
  }
}

// ==================== EVALUATION STATISTICS APIs ====================

// L·∫•y th·ªëng k√™ ƒë√°nh gi√° c·ªßa board
export const getEvaluationStatsAPI = async (boardId) => {
  try {
    const response = await authorizedAxiosInstance.get(`${API_ROOT}/v1/evaluation/`)
    return response.data
  } catch (error) {
    console.error('L·ªói khi l·∫•y th·ªëng k√™ ƒë√°nh gi√°:', error)
    throw error
  }
}
// ==================== SINGLE EVALUATION CRITERIA APIs ====================

/**
 * T·∫°o m·ªôt ti√™u ch√≠ ƒë√°nh gi√° ƒë∆°n l·∫ª
 * @param {Object} payload - D·ªØ li·ªáu ti√™u ch√≠
 * @param {string} payload.boardId - ID c·ªßa b·∫£ng
 * @param {string} payload.title - Ti√™u ƒë·ªÅ ti√™u ch√≠
 * @returns {Promise} Promise tr·∫£ v·ªÅ ti√™u ch√≠ ƒë√£ t·∫°o
 */
export const createSingleEvaluationCriteriaAPI = async ({ boardId, title }) => {
  try {
    const response = await authorizedAxiosInstance.post(
      `${API_ROOT}/v1/single`,
      { boardId, title }
    )
    return response.data
  } catch (error) {
    toast.error('Th√™m ti√™u ch√≠ th·∫•t b·∫°i!', { theme: 'colored' })
    throw error
  }
}

/**
 * C·∫≠p nh·∫≠t m·ªôt ti√™u ch√≠ ƒë√°nh gi√° ƒë∆°n l·∫ª
 * @param {string} criteriaId - ID c·ªßa ti√™u ch√≠
 * @param {Object} updateData - D·ªØ li·ªáu c·∫≠p nh·∫≠t
 * @param {string} updateData.title - Ti√™u ƒë·ªÅ m·ªõi
 * @returns {Promise} Promise tr·∫£ v·ªÅ ti√™u ch√≠ ƒë√£ c·∫≠p nh·∫≠t
 */
export const updateSingleEvaluationCriteriaAPI = async (singleCriteriaId, updateData) => {
  try {
    const response = await authorizedAxiosInstance.put(
      `${API_ROOT}/v1/single/${singleCriteriaId}`,
      updateData
    )
    toast.success('C·∫≠p nh·∫≠t ti√™u ch√≠ th√†nh c√¥ng!', { theme: 'colored' })
    return response.data
  } catch (error) {
    toast.error('C·∫≠p nh·∫≠t ti√™u ch√≠ th·∫•t b·∫°i!', { theme: 'colored' })
    throw error
  }
}

/**
 * X√≥a m·ªôt ti√™u ch√≠ ƒë√°nh gi√° ƒë∆°n l·∫ª
 * @param {string} criteriaId - ID c·ªßa ti√™u ch√≠
 * @returns {Promise} Promise tr·∫£ v·ªÅ k·∫øt qu·∫£ x√≥a
 */
export const deleteSingleEvaluationCriteriaAPI = async (singleCriteriaId) => {
  try {
    const response = await authorizedAxiosInstance.delete(
      `${API_ROOT}/v1/single/${singleCriteriaId}`
    )
    return response.data
  } catch (error) {
    toast.error('X√≥a ti√™u ch√≠ th·∫•t b·∫°i!', { theme: 'colored' })
    throw error
  }
}
/**
 * L·∫•y th√¥ng tin m·ªôt ti√™u ch√≠ ƒë∆°n l·∫ª
 * @param {string} criteriaId - ID c·ªßa ti√™u ch√≠
 * @returns {Promise} Promise tr·∫£ v·ªÅ th√¥ng tin ti√™u ch√≠
 */
export const getSingleEvaluationCriteriaAPI = async (criteriaId) => {
  try {
    const response = await authorizedAxiosInstance.get(
      `${API_ROOT}/v1/evaluation/criteria/single/${criteriaId}`
    )
    return response.data
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin ti√™u ch√≠:', error)
    throw error
  }
}
export const sendExplainAIRequestAPI = async ({ text }) => {
  // Gi·∫£ s·ª≠ g·ªçi API t·ªõi BE ho·∫∑c OpenAI
  const response = await authorizedAxiosInstance.post('/v1/explain', { text })
  return response.data
}
// Spell Check API
export const checkSpellingAPI = async (text, language = 'auto') => {
  try {
    const response = await authorizedAxiosInstance.post(`${API_ROOT}/v1/spell-check`, {
      text,
      language
    })
    return response.data
  } catch (error) {
    console.error('Spell check API error:', error)
    throw error
  }
}

// ‚úÖ API function ƒë√£ s·ª≠a
export const fetchAllBoards = async (queryParams = {}) => {
  try {
    const response = await authorizedAxiosInstance.get(`${API_ROOT}/v1/boards/admin/all`, {
      params: {
        page: queryParams.page || 1,
        itemsPerPage: queryParams.itemsPerPage || DEFAULT_ITEMS_PER_PAGE,
        ...(queryParams.q && { q: queryParams.q }) // Ch·ªâ th√™m q n·∫øu c√≥ search query
      }
    })
    return response.data
  } catch (error) {
    console.error('‚ùå Error in fetchAllBoards:', error)
    throw error
  }
}
// Th√™m v√†o file apis/index.js
export const fetchAllUsers = async (queryParams = {}) => {
  try {
    const response = await authorizedAxiosInstance.get(`${API_ROOT}/v1/users/all`, {
      params: {
        page: queryParams.page || 1,
        limit: queryParams.limit || DEFAULT_ITEMS_PER_PAGE,
        ...(queryParams.search && { search: queryParams.search }) // Ch·ªâ th√™m search n·∫øu c√≥
      }
    })
    return response.data
  } catch (error) {
    console.error('‚ùå Error in fetchAllUsers:', error)
    throw error
  }
}